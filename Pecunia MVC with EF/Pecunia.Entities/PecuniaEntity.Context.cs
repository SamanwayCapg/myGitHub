//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Capgemini.Pecunia.Entities
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PecuniaEntities : DbContext
    {
        public PecuniaEntities()
            : base("name=PecuniaEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<Admin> Admins { get; set; }
        public virtual DbSet<CarLoan> CarLoans { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<EduLoan> EduLoans { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<FixedDeposit> FixedDeposits { get; set; }
        public virtual DbSet<HomeLoan> HomeLoans { get; set; }
        public virtual DbSet<Transaction> Transactions { get; set; }
    
        public virtual int AddAccountDAL(string accountType, Nullable<long> accountNumber, Nullable<System.Guid> accountID, Nullable<System.Guid> customerID, string homeBranch, Nullable<bool> isActive)
        {
            var accountTypeParameter = accountType != null ?
                new ObjectParameter("AccountType", accountType) :
                new ObjectParameter("AccountType", typeof(string));
    
            var accountNumberParameter = accountNumber.HasValue ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(long));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(System.Guid));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(System.Guid));
    
            var homeBranchParameter = homeBranch != null ?
                new ObjectParameter("HomeBranch", homeBranch) :
                new ObjectParameter("HomeBranch", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddAccountDAL", accountTypeParameter, accountNumberParameter, accountIDParameter, customerIDParameter, homeBranchParameter, isActiveParameter);
        }
    
        public virtual int AddAccountDAL1(Nullable<System.Guid> accountID, Nullable<System.Guid> customerID, string accountType, Nullable<long> accountNumber, string homeBranch, Nullable<bool> isActive)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(System.Guid));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(System.Guid));
    
            var accountTypeParameter = accountType != null ?
                new ObjectParameter("AccountType", accountType) :
                new ObjectParameter("AccountType", typeof(string));
    
            var accountNumberParameter = accountNumber.HasValue ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(long));
    
            var homeBranchParameter = homeBranch != null ?
                new ObjectParameter("HomeBranch", homeBranch) :
                new ObjectParameter("HomeBranch", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddAccountDAL1", accountIDParameter, customerIDParameter, accountTypeParameter, accountNumberParameter, homeBranchParameter, isActiveParameter);
        }
    
        public virtual int AddAdmin(Nullable<System.Guid> adminid, string adminname, string adminemail, string adminpassword)
        {
            var adminidParameter = adminid.HasValue ?
                new ObjectParameter("adminid", adminid) :
                new ObjectParameter("adminid", typeof(System.Guid));
    
            var adminnameParameter = adminname != null ?
                new ObjectParameter("adminname", adminname) :
                new ObjectParameter("adminname", typeof(string));
    
            var adminemailParameter = adminemail != null ?
                new ObjectParameter("adminemail", adminemail) :
                new ObjectParameter("adminemail", typeof(string));
    
            var adminpasswordParameter = adminpassword != null ?
                new ObjectParameter("adminpassword", adminpassword) :
                new ObjectParameter("adminpassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddAdmin", adminidParameter, adminnameParameter, adminemailParameter, adminpasswordParameter);
        }
    
        public virtual int AddCustomerDAL(Nullable<System.Guid> customerID, string customerName, string customerAddress, string customerMobile, string customerEmail, string customerPan, string customerAadhaarNumber, Nullable<System.DateTime> dOB, string customerGender)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(System.Guid));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerAddressParameter = customerAddress != null ?
                new ObjectParameter("CustomerAddress", customerAddress) :
                new ObjectParameter("CustomerAddress", typeof(string));
    
            var customerMobileParameter = customerMobile != null ?
                new ObjectParameter("CustomerMobile", customerMobile) :
                new ObjectParameter("CustomerMobile", typeof(string));
    
            var customerEmailParameter = customerEmail != null ?
                new ObjectParameter("CustomerEmail", customerEmail) :
                new ObjectParameter("CustomerEmail", typeof(string));
    
            var customerPanParameter = customerPan != null ?
                new ObjectParameter("CustomerPan", customerPan) :
                new ObjectParameter("CustomerPan", typeof(string));
    
            var customerAadhaarNumberParameter = customerAadhaarNumber != null ?
                new ObjectParameter("CustomerAadhaarNumber", customerAadhaarNumber) :
                new ObjectParameter("CustomerAadhaarNumber", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var customerGenderParameter = customerGender != null ?
                new ObjectParameter("CustomerGender", customerGender) :
                new ObjectParameter("CustomerGender", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCustomerDAL", customerIDParameter, customerNameParameter, customerAddressParameter, customerMobileParameter, customerEmailParameter, customerPanParameter, customerAadhaarNumberParameter, dOBParameter, customerGenderParameter);
        }
    
        public virtual int AddEmployees(Nullable<System.Guid> empid, string empname, string empemail, string emppassword, string empmobile)
        {
            var empidParameter = empid.HasValue ?
                new ObjectParameter("empid", empid) :
                new ObjectParameter("empid", typeof(System.Guid));
    
            var empnameParameter = empname != null ?
                new ObjectParameter("empname", empname) :
                new ObjectParameter("empname", typeof(string));
    
            var empemailParameter = empemail != null ?
                new ObjectParameter("empemail", empemail) :
                new ObjectParameter("empemail", typeof(string));
    
            var emppasswordParameter = emppassword != null ?
                new ObjectParameter("emppassword", emppassword) :
                new ObjectParameter("emppassword", typeof(string));
    
            var empmobileParameter = empmobile != null ?
                new ObjectParameter("empmobile", empmobile) :
                new ObjectParameter("empmobile", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEmployees", empidParameter, empnameParameter, empemailParameter, emppasswordParameter, empmobileParameter);
        }
    
        public virtual int AddFixedDepositDAL(Nullable<long> accountNumber, Nullable<System.Guid> accountID, Nullable<System.Guid> customerID, string homeBranch, Nullable<bool> isActive, Nullable<decimal> fdDeposit, Nullable<decimal> interestRate, Nullable<int> tenure)
        {
            var accountNumberParameter = accountNumber.HasValue ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(long));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(System.Guid));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(System.Guid));
    
            var homeBranchParameter = homeBranch != null ?
                new ObjectParameter("HomeBranch", homeBranch) :
                new ObjectParameter("HomeBranch", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var fdDepositParameter = fdDeposit.HasValue ?
                new ObjectParameter("FdDeposit", fdDeposit) :
                new ObjectParameter("FdDeposit", typeof(decimal));
    
            var interestRateParameter = interestRate.HasValue ?
                new ObjectParameter("InterestRate", interestRate) :
                new ObjectParameter("InterestRate", typeof(decimal));
    
            var tenureParameter = tenure.HasValue ?
                new ObjectParameter("Tenure", tenure) :
                new ObjectParameter("Tenure", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddFixedDepositDAL", accountNumberParameter, accountIDParameter, customerIDParameter, homeBranchParameter, isActiveParameter, fdDepositParameter, interestRateParameter, tenureParameter);
        }
    
        public virtual int AddFixedDepositDAL1(Nullable<System.Guid> accountID, Nullable<System.Guid> customerID, Nullable<long> accountNumber, string homeBranch, Nullable<bool> isActive, Nullable<int> tenure, Nullable<decimal> fdDeposit, Nullable<decimal> interestRate)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(System.Guid));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(System.Guid));
    
            var accountNumberParameter = accountNumber.HasValue ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(long));
    
            var homeBranchParameter = homeBranch != null ?
                new ObjectParameter("HomeBranch", homeBranch) :
                new ObjectParameter("HomeBranch", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var tenureParameter = tenure.HasValue ?
                new ObjectParameter("Tenure", tenure) :
                new ObjectParameter("Tenure", typeof(int));
    
            var fdDepositParameter = fdDeposit.HasValue ?
                new ObjectParameter("FdDeposit", fdDeposit) :
                new ObjectParameter("FdDeposit", typeof(decimal));
    
            var interestRateParameter = interestRate.HasValue ?
                new ObjectParameter("InterestRate", interestRate) :
                new ObjectParameter("InterestRate", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddFixedDepositDAL1", accountIDParameter, customerIDParameter, accountNumberParameter, homeBranchParameter, isActiveParameter, tenureParameter, fdDepositParameter, interestRateParameter);
        }
    
        public virtual int AddFixedDepositDAL2(Nullable<System.Guid> accountID, Nullable<System.Guid> customerID, Nullable<decimal> fdDeposit, Nullable<long> accountNumber, string homeBranch, Nullable<bool> isActive, Nullable<decimal> interestRate, Nullable<int> tenure)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(System.Guid));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(System.Guid));
    
            var fdDepositParameter = fdDeposit.HasValue ?
                new ObjectParameter("FdDeposit", fdDeposit) :
                new ObjectParameter("FdDeposit", typeof(decimal));
    
            var accountNumberParameter = accountNumber.HasValue ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(long));
    
            var homeBranchParameter = homeBranch != null ?
                new ObjectParameter("HomeBranch", homeBranch) :
                new ObjectParameter("HomeBranch", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var interestRateParameter = interestRate.HasValue ?
                new ObjectParameter("InterestRate", interestRate) :
                new ObjectParameter("InterestRate", typeof(decimal));
    
            var tenureParameter = tenure.HasValue ?
                new ObjectParameter("Tenure", tenure) :
                new ObjectParameter("Tenure", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddFixedDepositDAL2", accountIDParameter, customerIDParameter, fdDepositParameter, accountNumberParameter, homeBranchParameter, isActiveParameter, interestRateParameter, tenureParameter);
        }
    
        public virtual int applyCarLoan(Nullable<System.Guid> loanID, Nullable<System.Guid> customerID, Nullable<decimal> amountApplied, Nullable<decimal> interestRate, Nullable<decimal> eMI_amount, Nullable<byte> repaymentPeriod, Nullable<System.DateTime> dateOfApplication, string loanStatus, string occupation, Nullable<decimal> grossIncome, Nullable<decimal> salaryDeduction, string vehicleType)
        {
            var loanIDParameter = loanID.HasValue ?
                new ObjectParameter("LoanID", loanID) :
                new ObjectParameter("LoanID", typeof(System.Guid));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(System.Guid));
    
            var amountAppliedParameter = amountApplied.HasValue ?
                new ObjectParameter("AmountApplied", amountApplied) :
                new ObjectParameter("AmountApplied", typeof(decimal));
    
            var interestRateParameter = interestRate.HasValue ?
                new ObjectParameter("InterestRate", interestRate) :
                new ObjectParameter("InterestRate", typeof(decimal));
    
            var eMI_amountParameter = eMI_amount.HasValue ?
                new ObjectParameter("EMI_amount", eMI_amount) :
                new ObjectParameter("EMI_amount", typeof(decimal));
    
            var repaymentPeriodParameter = repaymentPeriod.HasValue ?
                new ObjectParameter("RepaymentPeriod", repaymentPeriod) :
                new ObjectParameter("RepaymentPeriod", typeof(byte));
    
            var dateOfApplicationParameter = dateOfApplication.HasValue ?
                new ObjectParameter("DateOfApplication", dateOfApplication) :
                new ObjectParameter("DateOfApplication", typeof(System.DateTime));
    
            var loanStatusParameter = loanStatus != null ?
                new ObjectParameter("LoanStatus", loanStatus) :
                new ObjectParameter("LoanStatus", typeof(string));
    
            var occupationParameter = occupation != null ?
                new ObjectParameter("Occupation", occupation) :
                new ObjectParameter("Occupation", typeof(string));
    
            var grossIncomeParameter = grossIncome.HasValue ?
                new ObjectParameter("GrossIncome", grossIncome) :
                new ObjectParameter("GrossIncome", typeof(decimal));
    
            var salaryDeductionParameter = salaryDeduction.HasValue ?
                new ObjectParameter("SalaryDeduction", salaryDeduction) :
                new ObjectParameter("SalaryDeduction", typeof(decimal));
    
            var vehicleTypeParameter = vehicleType != null ?
                new ObjectParameter("VehicleType", vehicleType) :
                new ObjectParameter("VehicleType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("applyCarLoan", loanIDParameter, customerIDParameter, amountAppliedParameter, interestRateParameter, eMI_amountParameter, repaymentPeriodParameter, dateOfApplicationParameter, loanStatusParameter, occupationParameter, grossIncomeParameter, salaryDeductionParameter, vehicleTypeParameter);
        }
    
        public virtual int applyEduLoan(Nullable<System.Guid> loanID, Nullable<System.Guid> customerID, Nullable<decimal> amountApplied, Nullable<decimal> interestRate, Nullable<decimal> eMI_amount, Nullable<byte> repaymentPeriod, Nullable<System.DateTime> dateOfApplication, string loanStatus, string course, string instituteName, string studentID, Nullable<byte> repaymentHoliday)
        {
            var loanIDParameter = loanID.HasValue ?
                new ObjectParameter("LoanID", loanID) :
                new ObjectParameter("LoanID", typeof(System.Guid));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(System.Guid));
    
            var amountAppliedParameter = amountApplied.HasValue ?
                new ObjectParameter("AmountApplied", amountApplied) :
                new ObjectParameter("AmountApplied", typeof(decimal));
    
            var interestRateParameter = interestRate.HasValue ?
                new ObjectParameter("InterestRate", interestRate) :
                new ObjectParameter("InterestRate", typeof(decimal));
    
            var eMI_amountParameter = eMI_amount.HasValue ?
                new ObjectParameter("EMI_amount", eMI_amount) :
                new ObjectParameter("EMI_amount", typeof(decimal));
    
            var repaymentPeriodParameter = repaymentPeriod.HasValue ?
                new ObjectParameter("RepaymentPeriod", repaymentPeriod) :
                new ObjectParameter("RepaymentPeriod", typeof(byte));
    
            var dateOfApplicationParameter = dateOfApplication.HasValue ?
                new ObjectParameter("DateOfApplication", dateOfApplication) :
                new ObjectParameter("DateOfApplication", typeof(System.DateTime));
    
            var loanStatusParameter = loanStatus != null ?
                new ObjectParameter("LoanStatus", loanStatus) :
                new ObjectParameter("LoanStatus", typeof(string));
    
            var courseParameter = course != null ?
                new ObjectParameter("Course", course) :
                new ObjectParameter("Course", typeof(string));
    
            var instituteNameParameter = instituteName != null ?
                new ObjectParameter("InstituteName", instituteName) :
                new ObjectParameter("InstituteName", typeof(string));
    
            var studentIDParameter = studentID != null ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(string));
    
            var repaymentHolidayParameter = repaymentHoliday.HasValue ?
                new ObjectParameter("RepaymentHoliday", repaymentHoliday) :
                new ObjectParameter("RepaymentHoliday", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("applyEduLoan", loanIDParameter, customerIDParameter, amountAppliedParameter, interestRateParameter, eMI_amountParameter, repaymentPeriodParameter, dateOfApplicationParameter, loanStatusParameter, courseParameter, instituteNameParameter, studentIDParameter, repaymentHolidayParameter);
        }
    
        public virtual int applyHomeLoan(Nullable<System.Guid> loanID, Nullable<System.Guid> customerID, Nullable<decimal> amountApplied, Nullable<decimal> interestRate, Nullable<decimal> eMI_amount, Nullable<byte> repaymentPeriod, Nullable<System.DateTime> dateOfApplication, string loanStatus, string occupation, Nullable<byte> serviceYears, Nullable<decimal> grossIncome, Nullable<decimal> salaryDeduction)
        {
            var loanIDParameter = loanID.HasValue ?
                new ObjectParameter("LoanID", loanID) :
                new ObjectParameter("LoanID", typeof(System.Guid));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(System.Guid));
    
            var amountAppliedParameter = amountApplied.HasValue ?
                new ObjectParameter("AmountApplied", amountApplied) :
                new ObjectParameter("AmountApplied", typeof(decimal));
    
            var interestRateParameter = interestRate.HasValue ?
                new ObjectParameter("InterestRate", interestRate) :
                new ObjectParameter("InterestRate", typeof(decimal));
    
            var eMI_amountParameter = eMI_amount.HasValue ?
                new ObjectParameter("EMI_amount", eMI_amount) :
                new ObjectParameter("EMI_amount", typeof(decimal));
    
            var repaymentPeriodParameter = repaymentPeriod.HasValue ?
                new ObjectParameter("RepaymentPeriod", repaymentPeriod) :
                new ObjectParameter("RepaymentPeriod", typeof(byte));
    
            var dateOfApplicationParameter = dateOfApplication.HasValue ?
                new ObjectParameter("DateOfApplication", dateOfApplication) :
                new ObjectParameter("DateOfApplication", typeof(System.DateTime));
    
            var loanStatusParameter = loanStatus != null ?
                new ObjectParameter("LoanStatus", loanStatus) :
                new ObjectParameter("LoanStatus", typeof(string));
    
            var occupationParameter = occupation != null ?
                new ObjectParameter("Occupation", occupation) :
                new ObjectParameter("Occupation", typeof(string));
    
            var serviceYearsParameter = serviceYears.HasValue ?
                new ObjectParameter("ServiceYears", serviceYears) :
                new ObjectParameter("ServiceYears", typeof(byte));
    
            var grossIncomeParameter = grossIncome.HasValue ?
                new ObjectParameter("GrossIncome", grossIncome) :
                new ObjectParameter("GrossIncome", typeof(decimal));
    
            var salaryDeductionParameter = salaryDeduction.HasValue ?
                new ObjectParameter("SalaryDeduction", salaryDeduction) :
                new ObjectParameter("SalaryDeduction", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("applyHomeLoan", loanIDParameter, customerIDParameter, amountAppliedParameter, interestRateParameter, eMI_amountParameter, repaymentPeriodParameter, dateOfApplicationParameter, loanStatusParameter, occupationParameter, serviceYearsParameter, grossIncomeParameter, salaryDeductionParameter);
        }
    
        public virtual int approveCarLoan(Nullable<System.Guid> loanID, string updatedStatus)
        {
            var loanIDParameter = loanID.HasValue ?
                new ObjectParameter("LoanID", loanID) :
                new ObjectParameter("LoanID", typeof(System.Guid));
    
            var updatedStatusParameter = updatedStatus != null ?
                new ObjectParameter("updatedStatus", updatedStatus) :
                new ObjectParameter("updatedStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("approveCarLoan", loanIDParameter, updatedStatusParameter);
        }
    
        public virtual int approveEduLoan(Nullable<System.Guid> loanID, string updatedStatus)
        {
            var loanIDParameter = loanID.HasValue ?
                new ObjectParameter("LoanID", loanID) :
                new ObjectParameter("LoanID", typeof(System.Guid));
    
            var updatedStatusParameter = updatedStatus != null ?
                new ObjectParameter("updatedStatus", updatedStatus) :
                new ObjectParameter("updatedStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("approveEduLoan", loanIDParameter, updatedStatusParameter);
        }
    
        public virtual int approveHomeLoan(Nullable<System.Guid> loanID, string updatedStatus)
        {
            var loanIDParameter = loanID.HasValue ?
                new ObjectParameter("LoanID", loanID) :
                new ObjectParameter("LoanID", typeof(System.Guid));
    
            var updatedStatusParameter = updatedStatus != null ?
                new ObjectParameter("updatedStatus", updatedStatus) :
                new ObjectParameter("updatedStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("approveHomeLoan", loanIDParameter, updatedStatusParameter);
        }
    
        public virtual int cancelCarLoan(Nullable<System.Guid> loanID)
        {
            var loanIDParameter = loanID.HasValue ?
                new ObjectParameter("loanID", loanID) :
                new ObjectParameter("loanID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cancelCarLoan", loanIDParameter);
        }
    
        public virtual int cancelEduLoan(Nullable<System.Guid> loanID)
        {
            var loanIDParameter = loanID.HasValue ?
                new ObjectParameter("loanID", loanID) :
                new ObjectParameter("loanID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cancelEduLoan", loanIDParameter);
        }
    
        public virtual int cancelHomeLoan(Nullable<System.Guid> loanID)
        {
            var loanIDParameter = loanID.HasValue ?
                new ObjectParameter("loanID", loanID) :
                new ObjectParameter("loanID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cancelHomeLoan", loanIDParameter);
        }
    
        public virtual int ChangeAccountType1(Nullable<System.Guid> accountID, string accountType)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(System.Guid));
    
            var accountTypeParameter = accountType != null ?
                new ObjectParameter("AccountType", accountType) :
                new ObjectParameter("AccountType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangeAccountType1", accountIDParameter, accountTypeParameter);
        }
    
        public virtual int ChangeBranchofAccount(Nullable<System.Guid> accountID, string homeBranch)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(System.Guid));
    
            var homeBranchParameter = homeBranch != null ?
                new ObjectParameter("HomeBranch", homeBranch) :
                new ObjectParameter("HomeBranch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangeBranchofAccount", accountIDParameter, homeBranchParameter);
        }
    
        public virtual int ChangeBranchofAccount1(Nullable<System.Guid> accountID, string homeBranch)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(System.Guid));
    
            var homeBranchParameter = homeBranch != null ?
                new ObjectParameter("HomeBranch", homeBranch) :
                new ObjectParameter("HomeBranch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangeBranchofAccount1", accountIDParameter, homeBranchParameter);
        }
    
        public virtual int ChangeBranchofFixedDeposit(Nullable<System.Guid> accountID, string homeBranch)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(System.Guid));
    
            var homeBranchParameter = homeBranch != null ?
                new ObjectParameter("HomeBranch", homeBranch) :
                new ObjectParameter("HomeBranch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangeBranchofFixedDeposit", accountIDParameter, homeBranchParameter);
        }
    
        public virtual int ChangeFDDeposit(Nullable<System.Guid> accountID, Nullable<decimal> fdDeposit)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(System.Guid));
    
            var fdDepositParameter = fdDeposit.HasValue ?
                new ObjectParameter("FdDeposit", fdDeposit) :
                new ObjectParameter("FdDeposit", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangeFDDeposit", accountIDParameter, fdDepositParameter);
        }
    
        public virtual int CreditBalance(Nullable<System.Guid> accountID, Nullable<decimal> amount)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("accountID", accountID) :
                new ObjectParameter("accountID", typeof(System.Guid));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreditBalance", accountIDParameter, amountParameter);
        }
    
        public virtual int CreditTransactionByCheque(Nullable<System.Guid> accountID, string typeOfTranscation, Nullable<decimal> amount, string modeOfTransaction, string chequeNumber)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("accountID", accountID) :
                new ObjectParameter("accountID", typeof(System.Guid));
    
            var typeOfTranscationParameter = typeOfTranscation != null ?
                new ObjectParameter("typeOfTranscation", typeOfTranscation) :
                new ObjectParameter("typeOfTranscation", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            var modeOfTransactionParameter = modeOfTransaction != null ?
                new ObjectParameter("modeOfTransaction", modeOfTransaction) :
                new ObjectParameter("modeOfTransaction", typeof(string));
    
            var chequeNumberParameter = chequeNumber != null ?
                new ObjectParameter("chequeNumber", chequeNumber) :
                new ObjectParameter("chequeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreditTransactionByCheque", accountIDParameter, typeOfTranscationParameter, amountParameter, modeOfTransactionParameter, chequeNumberParameter);
        }
    
        public virtual int CreditTransactionByDepositSlip(Nullable<long> accountNumber, Nullable<System.Guid> accountID, string typeOfTranscation, Nullable<decimal> amount, string modeOfTransaction, string chequeNumber)
        {
            var accountNumberParameter = accountNumber.HasValue ?
                new ObjectParameter("accountNumber", accountNumber) :
                new ObjectParameter("accountNumber", typeof(long));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("accountID", accountID) :
                new ObjectParameter("accountID", typeof(System.Guid));
    
            var typeOfTranscationParameter = typeOfTranscation != null ?
                new ObjectParameter("typeOfTranscation", typeOfTranscation) :
                new ObjectParameter("typeOfTranscation", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            var modeOfTransactionParameter = modeOfTransaction != null ?
                new ObjectParameter("modeOfTransaction", modeOfTransaction) :
                new ObjectParameter("modeOfTransaction", typeof(string));
    
            var chequeNumberParameter = chequeNumber != null ?
                new ObjectParameter("chequeNumber", chequeNumber) :
                new ObjectParameter("chequeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreditTransactionByDepositSlip", accountNumberParameter, accountIDParameter, typeOfTranscationParameter, amountParameter, modeOfTransactionParameter, chequeNumberParameter);
        }
    
        public virtual int DebitBalance(Nullable<System.Guid> accountID, Nullable<decimal> amount)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("accountID", accountID) :
                new ObjectParameter("accountID", typeof(System.Guid));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DebitBalance", accountIDParameter, amountParameter);
        }
    
        public virtual int DebitBalanceC(Nullable<System.Guid> accountID, Nullable<decimal> amount, string chequeNumber)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("accountID", accountID) :
                new ObjectParameter("accountID", typeof(System.Guid));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            var chequeNumberParameter = chequeNumber != null ?
                new ObjectParameter("chequeNumber", chequeNumber) :
                new ObjectParameter("chequeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DebitBalanceC", accountIDParameter, amountParameter, chequeNumberParameter);
        }
    
        public virtual int DebitTransactionByCheque(Nullable<System.Guid> accountID, string typeOfTranscation, Nullable<decimal> amount, string modeOfTransaction, string chequeNumber)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("accountID", accountID) :
                new ObjectParameter("accountID", typeof(System.Guid));
    
            var typeOfTranscationParameter = typeOfTranscation != null ?
                new ObjectParameter("typeOfTranscation", typeOfTranscation) :
                new ObjectParameter("typeOfTranscation", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            var modeOfTransactionParameter = modeOfTransaction != null ?
                new ObjectParameter("modeOfTransaction", modeOfTransaction) :
                new ObjectParameter("modeOfTransaction", typeof(string));
    
            var chequeNumberParameter = chequeNumber != null ?
                new ObjectParameter("chequeNumber", chequeNumber) :
                new ObjectParameter("chequeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DebitTransactionByCheque", accountIDParameter, typeOfTranscationParameter, amountParameter, modeOfTransactionParameter, chequeNumberParameter);
        }
    
        public virtual int DebitTransactionByWithdrawalSlip(Nullable<System.Guid> accountID, string type, Nullable<decimal> amount, string mode, string chequeNumber)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("accountID", accountID) :
                new ObjectParameter("accountID", typeof(System.Guid));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            var modeParameter = mode != null ?
                new ObjectParameter("mode", mode) :
                new ObjectParameter("mode", typeof(string));
    
            var chequeNumberParameter = chequeNumber != null ?
                new ObjectParameter("chequeNumber", chequeNumber) :
                new ObjectParameter("chequeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DebitTransactionByWithdrawalSlip", accountIDParameter, typeParameter, amountParameter, modeParameter, chequeNumberParameter);
        }
    
        public virtual int DeleteAccountDAL(Nullable<System.Guid> accountID, string feedBack)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(System.Guid));
    
            var feedBackParameter = feedBack != null ?
                new ObjectParameter("FeedBack", feedBack) :
                new ObjectParameter("FeedBack", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAccountDAL", accountIDParameter, feedBackParameter);
        }
    
        public virtual int DeleteAccountDAL1(Nullable<System.Guid> accountID, string feedback)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(System.Guid));
    
            var feedbackParameter = feedback != null ?
                new ObjectParameter("Feedback", feedback) :
                new ObjectParameter("Feedback", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAccountDAL1", accountIDParameter, feedbackParameter);
        }
    
        public virtual int DeleteEmployee(Nullable<System.Guid> empid)
        {
            var empidParameter = empid.HasValue ?
                new ObjectParameter("empid", empid) :
                new ObjectParameter("empid", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteEmployee", empidParameter);
        }
    
        public virtual int DeleteFixedDepositDAL(Nullable<System.Guid> accountID, string feedback)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(System.Guid));
    
            var feedbackParameter = feedback != null ?
                new ObjectParameter("Feedback", feedback) :
                new ObjectParameter("Feedback", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteFixedDepositDAL", accountIDParameter, feedbackParameter);
        }
    
        public virtual int DeleteFixedDepositDAL1(Nullable<System.Guid> accountID, string feedback)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(System.Guid));
    
            var feedbackParameter = feedback != null ?
                new ObjectParameter("Feedback", feedback) :
                new ObjectParameter("Feedback", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteFixedDepositDAL1", accountIDParameter, feedbackParameter);
        }
    
        public virtual int FdAdding(Nullable<System.Guid> customerID, Nullable<System.Guid> accountID, string homeBranch, Nullable<int> tenure, Nullable<decimal> fdDeposit, Nullable<decimal> interestRate, Nullable<long> accountNumber, Nullable<bool> isActive)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(System.Guid));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(System.Guid));
    
            var homeBranchParameter = homeBranch != null ?
                new ObjectParameter("HomeBranch", homeBranch) :
                new ObjectParameter("HomeBranch", typeof(string));
    
            var tenureParameter = tenure.HasValue ?
                new ObjectParameter("Tenure", tenure) :
                new ObjectParameter("Tenure", typeof(int));
    
            var fdDepositParameter = fdDeposit.HasValue ?
                new ObjectParameter("FdDeposit", fdDeposit) :
                new ObjectParameter("FdDeposit", typeof(decimal));
    
            var interestRateParameter = interestRate.HasValue ?
                new ObjectParameter("InterestRate", interestRate) :
                new ObjectParameter("InterestRate", typeof(decimal));
    
            var accountNumberParameter = accountNumber.HasValue ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FdAdding", customerIDParameter, accountIDParameter, homeBranchParameter, tenureParameter, fdDepositParameter, interestRateParameter, accountNumberParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<GetAccountByAccountID_Result> GetAccountByAccountID(Nullable<System.Guid> accountID)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccountByAccountID_Result>("GetAccountByAccountID", accountIDParameter);
        }
    
        public virtual ObjectResult<GetAccountByAccountID1_Result> GetAccountByAccountID1(Nullable<System.Guid> accountID)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccountByAccountID1_Result>("GetAccountByAccountID1", accountIDParameter);
        }
    
        public virtual ObjectResult<GetAccountByCustomerID_Result> GetAccountByCustomerID(Nullable<System.Guid> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccountByCustomerID_Result>("GetAccountByCustomerID", customerIDParameter);
        }
    
        public virtual ObjectResult<GetAccountByCustomerID1_Result> GetAccountByCustomerID1(Nullable<System.Guid> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccountByCustomerID1_Result>("GetAccountByCustomerID1", customerIDParameter);
        }
    
        public virtual ObjectResult<GetAdminByAdminID_Result> GetAdminByAdminID(Nullable<System.Guid> adminID)
        {
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("adminID", adminID) :
                new ObjectParameter("adminID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAdminByAdminID_Result>("GetAdminByAdminID", adminIDParameter);
        }
    
        public virtual ObjectResult<GetAdminByEmailandPassword_Result> GetAdminByEmailandPassword(string adminEmail, string adminPassword)
        {
            var adminEmailParameter = adminEmail != null ?
                new ObjectParameter("adminEmail", adminEmail) :
                new ObjectParameter("adminEmail", typeof(string));
    
            var adminPasswordParameter = adminPassword != null ?
                new ObjectParameter("adminPassword", adminPassword) :
                new ObjectParameter("adminPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAdminByEmailandPassword_Result>("GetAdminByEmailandPassword", adminEmailParameter, adminPasswordParameter);
        }
    
        public virtual int GetAllCustomersDAL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAllCustomersDAL");
        }
    
        public virtual ObjectResult<GetAllEmployees_Result> GetAllEmployees()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllEmployees_Result>("GetAllEmployees");
        }
    
        public virtual ObjectResult<GetAllTransactions_Result> GetAllTransactions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllTransactions_Result>("GetAllTransactions");
        }
    
        public virtual ObjectResult<getCarLoanByCustomerID_Result> getCarLoanByCustomerID(Nullable<System.Guid> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("customerID", customerID) :
                new ObjectParameter("customerID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getCarLoanByCustomerID_Result>("getCarLoanByCustomerID", customerIDParameter);
        }
    
        public virtual ObjectResult<getCarLoanByLoanID_Result> getCarLoanByLoanID(Nullable<System.Guid> loanID)
        {
            var loanIDParameter = loanID.HasValue ?
                new ObjectParameter("loanID", loanID) :
                new ObjectParameter("loanID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getCarLoanByLoanID_Result>("getCarLoanByLoanID", loanIDParameter);
        }
    
        public virtual ObjectResult<string> getCarLoanStatus(Nullable<System.Guid> loanID)
        {
            var loanIDParameter = loanID.HasValue ?
                new ObjectParameter("loanID", loanID) :
                new ObjectParameter("loanID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("getCarLoanStatus", loanIDParameter);
        }
    
        public virtual int GetCustomerByCustomerIDDAL(Nullable<System.Guid> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCustomerByCustomerIDDAL", customerIDParameter);
        }
    
        public virtual ObjectResult<getEduLoanByCustomerID_Result> getEduLoanByCustomerID(Nullable<System.Guid> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("customerID", customerID) :
                new ObjectParameter("customerID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getEduLoanByCustomerID_Result>("getEduLoanByCustomerID", customerIDParameter);
        }
    
        public virtual ObjectResult<getEduLoanByLoanID_Result> getEduLoanByLoanID(Nullable<System.Guid> loanID)
        {
            var loanIDParameter = loanID.HasValue ?
                new ObjectParameter("loanID", loanID) :
                new ObjectParameter("loanID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getEduLoanByLoanID_Result>("getEduLoanByLoanID", loanIDParameter);
        }
    
        public virtual ObjectResult<string> getEduLoanStatus(Nullable<System.Guid> loanID)
        {
            var loanIDParameter = loanID.HasValue ?
                new ObjectParameter("loanID", loanID) :
                new ObjectParameter("loanID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("getEduLoanStatus", loanIDParameter);
        }
    
        public virtual int GetEmployeeByEmail(string empemail)
        {
            var empemailParameter = empemail != null ?
                new ObjectParameter("empemail", empemail) :
                new ObjectParameter("empemail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetEmployeeByEmail", empemailParameter);
        }
    
        public virtual ObjectResult<GetEmployeeByEmailandPassword_Result> GetEmployeeByEmailandPassword(string empemail, string emppassword)
        {
            var empemailParameter = empemail != null ?
                new ObjectParameter("empemail", empemail) :
                new ObjectParameter("empemail", typeof(string));
    
            var emppasswordParameter = emppassword != null ?
                new ObjectParameter("emppassword", emppassword) :
                new ObjectParameter("emppassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeByEmailandPassword_Result>("GetEmployeeByEmailandPassword", empemailParameter, emppasswordParameter);
        }
    
        public virtual ObjectResult<GetEmployeeByEmployeeID_Result> GetEmployeeByEmployeeID(Nullable<System.Guid> empid)
        {
            var empidParameter = empid.HasValue ?
                new ObjectParameter("empid", empid) :
                new ObjectParameter("empid", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeByEmployeeID_Result>("GetEmployeeByEmployeeID", empidParameter);
        }
    
        public virtual ObjectResult<GetEmployeeEmailandPassword_Result> GetEmployeeEmailandPassword(string empemail, string emppassword)
        {
            var empemailParameter = empemail != null ?
                new ObjectParameter("empemail", empemail) :
                new ObjectParameter("empemail", typeof(string));
    
            var emppasswordParameter = emppassword != null ?
                new ObjectParameter("emppassword", emppassword) :
                new ObjectParameter("emppassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeEmailandPassword_Result>("GetEmployeeEmailandPassword", empemailParameter, emppasswordParameter);
        }
    
        public virtual int GetEmployeesByName(string empname)
        {
            var empnameParameter = empname != null ?
                new ObjectParameter("empname", empname) :
                new ObjectParameter("empname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetEmployeesByName", empnameParameter);
        }
    
        public virtual ObjectResult<GetFixedDepositByAccountID_Result> GetFixedDepositByAccountID(Nullable<System.Guid> accountID)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFixedDepositByAccountID_Result>("GetFixedDepositByAccountID", accountIDParameter);
        }
    
        public virtual ObjectResult<GetFixedDepositByCustomerID_Result> GetFixedDepositByCustomerID(Nullable<System.Guid> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFixedDepositByCustomerID_Result>("GetFixedDepositByCustomerID", customerIDParameter);
        }
    
        public virtual ObjectResult<getHomeLoanByCustomerID_Result> getHomeLoanByCustomerID(Nullable<System.Guid> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("customerID", customerID) :
                new ObjectParameter("customerID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getHomeLoanByCustomerID_Result>("getHomeLoanByCustomerID", customerIDParameter);
        }
    
        public virtual ObjectResult<getHomeLoanByLoanID_Result> getHomeLoanByLoanID(Nullable<System.Guid> loanID)
        {
            var loanIDParameter = loanID.HasValue ?
                new ObjectParameter("loanID", loanID) :
                new ObjectParameter("loanID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getHomeLoanByLoanID_Result>("getHomeLoanByLoanID", loanIDParameter);
        }
    
        public virtual ObjectResult<string> getHomeLoanStatus(Nullable<System.Guid> loanID)
        {
            var loanIDParameter = loanID.HasValue ?
                new ObjectParameter("loanID", loanID) :
                new ObjectParameter("loanID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("getHomeLoanStatus", loanIDParameter);
        }
    
        public virtual ObjectResult<GetTransactionsByAccountID_Result> GetTransactionsByAccountID(Nullable<System.Guid> accountID)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("accountID", accountID) :
                new ObjectParameter("accountID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTransactionsByAccountID_Result>("GetTransactionsByAccountID", accountIDParameter);
        }
    
        public virtual int RemoveCustomerDAL(Nullable<System.Guid> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveCustomerDAL", customerIDParameter);
        }
    
        public virtual int StoreTransactionRecords(Nullable<System.Guid> accountID, string type, Nullable<decimal> amount, string mode, string chequeNumber)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("accountID", accountID) :
                new ObjectParameter("accountID", typeof(System.Guid));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            var modeParameter = mode != null ?
                new ObjectParameter("mode", mode) :
                new ObjectParameter("mode", typeof(string));
    
            var chequeNumberParameter = chequeNumber != null ?
                new ObjectParameter("chequeNumber", chequeNumber) :
                new ObjectParameter("chequeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("StoreTransactionRecords", accountIDParameter, typeParameter, amountParameter, modeParameter, chequeNumberParameter);
        }
    
        public virtual int UpdateAdminEmail(Nullable<System.Guid> adminID, string adminEmail)
        {
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("adminID", adminID) :
                new ObjectParameter("adminID", typeof(System.Guid));
    
            var adminEmailParameter = adminEmail != null ?
                new ObjectParameter("adminEmail", adminEmail) :
                new ObjectParameter("adminEmail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAdminEmail", adminIDParameter, adminEmailParameter);
        }
    
        public virtual int UpdateAdminNameAndEmail(Nullable<System.Guid> adminID, string adminName, string adminEmail)
        {
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("adminID", adminID) :
                new ObjectParameter("adminID", typeof(System.Guid));
    
            var adminNameParameter = adminName != null ?
                new ObjectParameter("adminName", adminName) :
                new ObjectParameter("adminName", typeof(string));
    
            var adminEmailParameter = adminEmail != null ?
                new ObjectParameter("adminEmail", adminEmail) :
                new ObjectParameter("adminEmail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAdminNameAndEmail", adminIDParameter, adminNameParameter, adminEmailParameter);
        }
    
        public virtual int UpdateAdminPassword(Nullable<System.Guid> adminID, string adminPassword)
        {
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("adminID", adminID) :
                new ObjectParameter("adminID", typeof(System.Guid));
    
            var adminPasswordParameter = adminPassword != null ?
                new ObjectParameter("adminPassword", adminPassword) :
                new ObjectParameter("adminPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAdminPassword", adminIDParameter, adminPasswordParameter);
        }
    
        public virtual int UpdateAllEmployeeDetails(Nullable<System.Guid> empid, string empname, string empemail, string empmobile)
        {
            var empidParameter = empid.HasValue ?
                new ObjectParameter("empid", empid) :
                new ObjectParameter("empid", typeof(System.Guid));
    
            var empnameParameter = empname != null ?
                new ObjectParameter("empname", empname) :
                new ObjectParameter("empname", typeof(string));
    
            var empemailParameter = empemail != null ?
                new ObjectParameter("empemail", empemail) :
                new ObjectParameter("empemail", typeof(string));
    
            var empmobileParameter = empmobile != null ?
                new ObjectParameter("empmobile", empmobile) :
                new ObjectParameter("empmobile", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAllEmployeeDetails", empidParameter, empnameParameter, empemailParameter, empmobileParameter);
        }
    
        public virtual int UpdateCustomerByCustomerIDDAL(Nullable<System.Guid> customerID, string customerName, string customerAddress, string customerMobile, string customerEmail, string customerPan, string customerAadhaarNumber, Nullable<System.DateTime> dOB, string customerGender)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(System.Guid));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerAddressParameter = customerAddress != null ?
                new ObjectParameter("CustomerAddress", customerAddress) :
                new ObjectParameter("CustomerAddress", typeof(string));
    
            var customerMobileParameter = customerMobile != null ?
                new ObjectParameter("CustomerMobile", customerMobile) :
                new ObjectParameter("CustomerMobile", typeof(string));
    
            var customerEmailParameter = customerEmail != null ?
                new ObjectParameter("CustomerEmail", customerEmail) :
                new ObjectParameter("CustomerEmail", typeof(string));
    
            var customerPanParameter = customerPan != null ?
                new ObjectParameter("CustomerPan", customerPan) :
                new ObjectParameter("CustomerPan", typeof(string));
    
            var customerAadhaarNumberParameter = customerAadhaarNumber != null ?
                new ObjectParameter("CustomerAadhaarNumber", customerAadhaarNumber) :
                new ObjectParameter("CustomerAadhaarNumber", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var customerGenderParameter = customerGender != null ?
                new ObjectParameter("CustomerGender", customerGender) :
                new ObjectParameter("CustomerGender", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCustomerByCustomerIDDAL", customerIDParameter, customerNameParameter, customerAddressParameter, customerMobileParameter, customerEmailParameter, customerPanParameter, customerAadhaarNumberParameter, dOBParameter, customerGenderParameter);
        }
    
        public virtual int UpdateEmployeeEmail(Nullable<System.Guid> empid, string empemail)
        {
            var empidParameter = empid.HasValue ?
                new ObjectParameter("empid", empid) :
                new ObjectParameter("empid", typeof(System.Guid));
    
            var empemailParameter = empemail != null ?
                new ObjectParameter("empemail", empemail) :
                new ObjectParameter("empemail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEmployeeEmail", empidParameter, empemailParameter);
        }
    
        public virtual int UpdateEmployeeMobile(Nullable<System.Guid> empid, string empmobile)
        {
            var empidParameter = empid.HasValue ?
                new ObjectParameter("empid", empid) :
                new ObjectParameter("empid", typeof(System.Guid));
    
            var empmobileParameter = empmobile != null ?
                new ObjectParameter("empmobile", empmobile) :
                new ObjectParameter("empmobile", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEmployeeMobile", empidParameter, empmobileParameter);
        }
    
        public virtual int UpdateEmployeeName(Nullable<System.Guid> empid, string empname)
        {
            var empidParameter = empid.HasValue ?
                new ObjectParameter("empid", empid) :
                new ObjectParameter("empid", typeof(System.Guid));
    
            var empnameParameter = empname != null ?
                new ObjectParameter("empname", empname) :
                new ObjectParameter("empname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEmployeeName", empidParameter, empnameParameter);
        }
    
        public virtual int UpdateEmployeePassword(Nullable<System.Guid> empid, string emppassword)
        {
            var empidParameter = empid.HasValue ?
                new ObjectParameter("empid", empid) :
                new ObjectParameter("empid", typeof(System.Guid));
    
            var emppasswordParameter = emppassword != null ?
                new ObjectParameter("emppassword", emppassword) :
                new ObjectParameter("emppassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEmployeePassword", empidParameter, emppasswordParameter);
        }
    }
}
